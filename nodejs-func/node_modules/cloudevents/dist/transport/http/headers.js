"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitize = exports.headersFor = exports.validate = exports.requiredHeaders = exports.allowedContentTypes = void 0;
const __1 = require("../..");
const versions_1 = require("./versions");
const constants_1 = __importDefault(require("../../constants"));
exports.allowedContentTypes = [constants_1.default.DEFAULT_CONTENT_TYPE, constants_1.default.MIME_JSON, constants_1.default.MIME_OCTET_STREAM];
exports.requiredHeaders = [
    constants_1.default.CE_HEADERS.ID,
    constants_1.default.CE_HEADERS.SOURCE,
    constants_1.default.CE_HEADERS.TYPE,
    constants_1.default.CE_HEADERS.SPEC_VERSION,
];
/**
 * Validates cloud event headers and their values
 * @param {Headers} headers event transport headers for validation
 * @throws {ValidationError} if the headers are invalid
 * @return {boolean} true if headers are valid
 */
function validate(headers) {
    const sanitizedHeaders = sanitize(headers);
    // if content-type exists, be sure it's an allowed type
    const contentTypeHeader = sanitizedHeaders[constants_1.default.HEADER_CONTENT_TYPE];
    const noContentType = !exports.allowedContentTypes.includes(contentTypeHeader);
    if (contentTypeHeader && noContentType) {
        throw new __1.ValidationError("invalid content type", [sanitizedHeaders[constants_1.default.HEADER_CONTENT_TYPE]]);
    }
    exports.requiredHeaders
        .filter((required) => !sanitizedHeaders[required])
        .forEach((required) => {
        throw new __1.ValidationError(`header '${required}' not found`);
    });
    if (!sanitizedHeaders[constants_1.default.HEADER_CONTENT_TYPE]) {
        sanitizedHeaders[constants_1.default.HEADER_CONTENT_TYPE] = constants_1.default.MIME_JSON;
    }
    return sanitizedHeaders;
}
exports.validate = validate;
/**
 * Returns the HTTP headers that will be sent for this event when the HTTP transmission
 * mode is "binary". Events sent over HTTP in structured mode only have a single CE header
 * and that is "ce-id", corresponding to the event ID.
 * @param {CloudEvent} event a CloudEvent
 * @returns {Object} the headers that will be sent for the event
 */
function headersFor(event) {
    const headers = {};
    let headerMap;
    if (event.specversion === "1.0" /* V1 */) {
        headerMap = versions_1.v1headerMap;
    }
    else {
        headerMap = versions_1.v03headerMap;
    }
    // iterate over the event properties - generate a header for each
    Object.getOwnPropertyNames(event).forEach((property) => {
        const value = event[property];
        if (value) {
            const map = headerMap[property];
            if (map) {
                headers[map.name] = map.parser.parse(value);
            }
            else if (property !== constants_1.default.DATA_ATTRIBUTE && property !== `${constants_1.default.DATA_ATTRIBUTE}_base64`) {
                headers[`${constants_1.default.EXTENSIONS_PREFIX}${property}`] = value;
            }
        }
    });
    // Treat time specially, since it's handled with getters and setters in CloudEvent
    if (event.time) {
        headers[constants_1.default.CE_HEADERS.TIME] = event.time;
    }
    return headers;
}
exports.headersFor = headersFor;
/**
 * Sanitizes incoming headers by lowercasing them and potentially removing
 * encoding from the content-type header.
 * @param {Headers} headers HTTP headers as key/value pairs
 * @returns {Headers} the sanitized headers
 */
function sanitize(headers) {
    const sanitized = {};
    Array.from(Object.keys(headers))
        .filter((header) => Object.hasOwnProperty.call(headers, header))
        .forEach((header) => (sanitized[header.toLowerCase()] = headers[header]));
    return sanitized;
}
exports.sanitize = sanitize;
