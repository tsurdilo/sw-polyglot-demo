"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructuredHTTPReceiver = void 0;
const __1 = require("../..");
const headers_1 = require("./headers");
const parsers_1 = require("../../parsers");
const parsers_2 = require("../../parsers");
const versions_1 = require("./versions");
const validation_1 = require("../../event/validation");
const spec_1 = require("../../event/spec");
const constants_1 = __importDefault(require("../../constants"));
/**
 * A utility class used to receive structured CloudEvents
 * over HTTP.
 * @see {StructuredReceiver}
 */
class StructuredHTTPReceiver {
    constructor(version = "1.0" /* V1 */) {
        this.version = version;
    }
    /**
     * Creates a new CloudEvent instance based on the provided payload and headers.
     *
     * @param {object} payload the cloud event data payload
     * @param {object} headers  the HTTP headers received for this cloud event
     * @returns {CloudEvent} a new CloudEvent instance for the provided headers and payload
     * @throws {ValidationError} if the payload and header combination do not conform to the spec
     */
    parse(payload, headers) {
        if (!payload)
            throw new validation_1.ValidationError("payload is null or undefined");
        if (!headers)
            throw new validation_1.ValidationError("headers is null or undefined");
        validation_1.isStringOrObjectOrThrow(payload, new validation_1.ValidationError("payload must be an object or a string"));
        if (headers[constants_1.default.CE_HEADERS.SPEC_VERSION] &&
            headers[constants_1.default.CE_HEADERS.SPEC_VERSION] != "0.3" /* V03 */ &&
            headers[constants_1.default.CE_HEADERS.SPEC_VERSION] != "1.0" /* V1 */) {
            throw new validation_1.ValidationError(`invalid spec version ${headers[constants_1.default.CE_HEADERS.SPEC_VERSION]}`);
        }
        payload = validation_1.isString(payload) && validation_1.isBase64(payload) ? Buffer.from(payload, "base64").toString() : payload;
        // Clone and low case all headers names
        const sanitizedHeaders = headers_1.sanitize(headers);
        const contentType = sanitizedHeaders[constants_1.default.HEADER_CONTENT_TYPE];
        const parser = contentType ? parsers_2.parserByContentType[contentType] : new parsers_1.JSONParser();
        if (!parser)
            throw new validation_1.ValidationError(`invalid content type ${sanitizedHeaders[constants_1.default.HEADER_CONTENT_TYPE]}`);
        const incoming = Object.assign({}, parser.parse(payload));
        const eventObj = {};
        const parserMap = this.version === "1.0" /* V1 */ ? versions_1.v1structuredParsers : versions_1.v03structuredParsers;
        for (const key in parserMap) {
            const property = incoming[key];
            if (property) {
                const parser = parserMap[key];
                eventObj[parser.name] = parser.parser.parse(property);
            }
            delete incoming[key];
        }
        // extensions are what we have left after processing all other properties
        for (const key in incoming) {
            eventObj[key] = incoming[key];
        }
        // ensure data content is correctly encoded
        if (eventObj.data && eventObj.datacontentencoding) {
            if (eventObj.datacontentencoding === constants_1.default.ENCODING_BASE64 && !validation_1.isBase64(eventObj.data)) {
                throw new validation_1.ValidationError("invalid payload");
            }
            else if (eventObj.datacontentencoding === constants_1.default.ENCODING_BASE64) {
                const dataParser = new parsers_1.Base64Parser();
                eventObj.data = JSON.parse(dataParser.parse(eventObj.data));
                delete eventObj.datacontentencoding;
            }
        }
        const cloudevent = new __1.CloudEvent(eventObj);
        // Validates the event
        spec_1.validateCloudEvent(cloudevent);
        return cloudevent;
    }
}
exports.StructuredHTTPReceiver = StructuredHTTPReceiver;
