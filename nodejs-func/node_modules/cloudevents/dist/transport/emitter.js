"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Emitter = void 0;
const http_1 = require("./http");
/**
 * A class to send binary and structured CloudEvents to a remote endpoint.
 * Currently, supported protocols are HTTPBinary and HTTPStructured.
 *
 * @see https://github.com/cloudevents/spec/blob/v1.0/http-protocol-binding.md
 * @see https://github.com/cloudevents/spec/blob/v1.0/http-protocol-binding.md#13-content-modes
 */
class Emitter {
    constructor(options = { protocol: 0 /* HTTPBinary */ }) {
        this.protocol = options.protocol;
        this.url = options.url;
        this.emitter = http_1.emitBinary;
        if (this.protocol === 1 /* HTTPStructured */) {
            this.emitter = http_1.emitStructured;
        }
    }
    /**
     * Sends the {CloudEvent} to an event receiver over HTTP POST
     *
     * @param {CloudEvent} event the CloudEvent to be sent
     * @param {Object} [options] The configuration options for this event. Options
     * provided will be passed along to Node.js `http.request()`.
     * https://nodejs.org/api/http.html#http_http_request_options_callback
     * @param {string} [options.url] The HTTP/S url that should receive this event.
     * The URL is optional if one was provided when this emitter was constructed.
     * In that case, it will be used as the recipient endpoint. The endpoint can
     * be overridden by providing a URL here.
     * @returns {Promise} Promise with an eventual response from the receiver
     * @deprecated Will be removed in 4.0.0. Consider using the Message interface with HTTP.[binary|structured](event)
     */
    send(event, options) {
        options = options || {};
        options.url = options.url || this.url;
        if (options.protocol != this.protocol) {
            if (this.protocol === 0 /* HTTPBinary */)
                return http_1.emitBinary(event, options);
            return http_1.emitStructured(event, options);
        }
        return this.emitter(event, options);
    }
}
exports.Emitter = Emitter;
