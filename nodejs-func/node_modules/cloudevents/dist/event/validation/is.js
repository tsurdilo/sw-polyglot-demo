"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asBase64 = exports.asData = exports.clone = exports.isBase64 = exports.equalsOrThrow = exports.isValidType = exports.isStringOrObjectOrThrow = exports.isDefinedOrThrow = exports.isBinary = exports.isDate = exports.isInteger = exports.isBoolean = exports.isDefined = exports.isObject = exports.isStringOrThrow = exports.isString = void 0;
const isString = (v) => typeof v === "string";
exports.isString = isString;
const isObject = (v) => typeof v === "object";
exports.isObject = isObject;
const isDefined = (v) => v && typeof v !== "undefined";
exports.isDefined = isDefined;
const isBoolean = (v) => typeof v === "boolean";
exports.isBoolean = isBoolean;
const isInteger = (v) => Number.isInteger(v);
exports.isInteger = isInteger;
const isDate = (v) => v instanceof Date;
exports.isDate = isDate;
const isBinary = (v) => v instanceof Uint32Array;
exports.isBinary = isBinary;
const isStringOrThrow = (v, t) => isString(v)
    ? true
    : (() => {
        throw t;
    })();
exports.isStringOrThrow = isStringOrThrow;
const isDefinedOrThrow = (v, t) => isDefined(v)
    ? true
    : (() => {
        throw t;
    })();
exports.isDefinedOrThrow = isDefinedOrThrow;
const isStringOrObjectOrThrow = (v, t) => isString(v)
    ? true
    : isObject(v)
        ? true
        : (() => {
            throw t;
        })();
exports.isStringOrObjectOrThrow = isStringOrObjectOrThrow;
const equalsOrThrow = (v1, v2, t) => v1 === v2
    ? true
    : (() => {
        throw t;
    })();
exports.equalsOrThrow = equalsOrThrow;
const isBase64 = (value) => Buffer.from(value, "base64").toString("base64") === value;
exports.isBase64 = isBase64;
const isBuffer = (value) => value instanceof Buffer;
const asBuffer = (value) => isBinary(value)
    ? Buffer.from(value)
    : isBuffer(value)
        ? value
        : (() => {
            throw new TypeError("is not buffer or a valid binary");
        })();
const asBase64 = (value) => asBuffer(value).toString("base64");
exports.asBase64 = asBase64;
const clone = (o) => JSON.parse(JSON.stringify(o));
exports.clone = clone;
const isJsonContentType = (contentType) => contentType && contentType.match(/(json)/i);
const asData = (data, contentType) => {
    // pattern matching alike
    const maybeJson = isString(data) && !isBase64(data) && isJsonContentType(contentType) ? JSON.parse(data) : data;
    return isBinary(maybeJson) ? asBase64(maybeJson) : maybeJson;
};
exports.asData = asData;
const isValidType = (v) => isBoolean(v) || isInteger(v) || isString(v) || isDate(v) || isBinary(v);
exports.isValidType = isValidType;
