"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateV03 = exports.createV03 = void 0;
const uuid_1 = require("uuid");
const ajv_1 = __importDefault(require("ajv"));
const validation_1 = require("../validation");
const __1 = require("../..");
const schema_1 = require("./schema");
const constants_1 = __importDefault(require("../../constants"));
const ajv = new ajv_1.default({ extendRefs: true });
const isValidAgainstSchema = ajv.compile(schema_1.schema);
function createV03(attributes) {
    const event = Object.assign({ specversion: schema_1.schema.definitions.specversion.const, id: uuid_1.v4(), time: new Date().toISOString() }, attributes);
    return new __1.CloudEvent(event);
}
exports.createV03 = createV03;
function validateV03(event) {
    if (!isValidAgainstSchema(event)) {
        throw new validation_1.ValidationError("invalid payload", isValidAgainstSchema.errors);
    }
    return checkDataContentEncoding(event);
}
exports.validateV03 = validateV03;
function checkDataContentEncoding(event) {
    if (event.datacontentencoding) {
        // we only support base64
        const encoding = event.datacontentencoding.toLocaleLowerCase();
        if (encoding !== constants_1.default.ENCODING_BASE64) {
            throw new validation_1.ValidationError("invalid payload", [`Unsupported content encoding: ${encoding}`]);
        }
        else {
            if (!validation_1.isBase64(event.data)) {
                throw new validation_1.ValidationError("invalid payload", [`Invalid content encoding of data: ${event.data}`]);
            }
        }
    }
    return true;
}
