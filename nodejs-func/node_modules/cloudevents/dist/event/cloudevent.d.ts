import { CloudEventV03, CloudEventV03Attributes, CloudEventV03OptionalAttributes, CloudEventV1, CloudEventV1Attributes, CloudEventV1OptionalAttributes } from "./interfaces";
/**
 * An enum representing the CloudEvent specification version
 */
export declare const enum Version {
    V1 = "1.0",
    V03 = "0.3"
}
/**
 * A CloudEvent describes event data in common formats to provide
 * interoperability across services, platforms and systems.
 * @see https://github.com/cloudevents/spec/blob/v1.0/spec.md
 */
export declare class CloudEvent implements CloudEventV1, CloudEventV03 {
    #private;
    id: string;
    type: string;
    source: string;
    specversion: Version;
    datacontenttype?: string;
    dataschema?: string;
    subject?: string;
    data_base64?: string;
    [key: string]: unknown;
    schemaurl?: string;
    datacontentencoding?: string;
    /**
     * Creates a new CloudEvent object with the provided properties. If there is a chance that the event
     * properties will not conform to the CloudEvent specification, you may pass a boolean `false` as a
     * second parameter to bypass event validation.
     *
     * @param {object} event the event properties
     * @param {boolean?} strict whether to perform event validation when creating the object - default: true
     */
    constructor(event: CloudEventV1 | CloudEventV1Attributes | CloudEventV03 | CloudEventV03Attributes, strict?: boolean);
    get time(): string | Date;
    set time(val: string | Date);
    get data(): unknown;
    set data(value: unknown);
    private _setData;
    /**
     * Used by JSON.stringify(). The name is confusing, but this method is called by
     * JSON.stringify() when converting this object to JSON.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
     * @return {object} this event as a plain object
     */
    toJSON(): Record<string, unknown>;
    toString(): string;
    /**
     * Validates this CloudEvent against the schema
     * @throws if the CloudEvent does not conform to the schema
     * @return {boolean} true if this event is valid
     */
    validate(): boolean;
    /**
     * Clone a CloudEvent with new/update attributes
     * @param {object} options attributes to augment the CloudEvent with
     * @param {boolean} strict whether or not to use strict validation when cloning (default: true)
     * @throws if the CloudEvent does not conform to the schema
     * @return {CloudEvent} returns a new CloudEvent
     */
    cloneWith(options: CloudEventV1 | CloudEventV1Attributes | CloudEventV1OptionalAttributes | CloudEventV03 | CloudEventV03Attributes | CloudEventV03OptionalAttributes, strict?: boolean): CloudEvent;
}
