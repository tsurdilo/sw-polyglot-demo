"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StructuredHTTPReceiver = void 0;
const __1 = require("../../");
const parsers_1 = require("../parsers");
/**
 * A utility class used to receive structured CloudEvents
 * over HTTP.
 * @see {StructuredReceiver}
 */
class StructuredHTTPReceiver {
    constructor(version = __1.Version.V1) {
        this.version = version;
    }
    /**
     * Creates a new CloudEvent instance based on the provided payload and headers.
     *
     * @param {object} payload the cloud event data payload
     * @param {object} headers  the HTTP headers received for this cloud event
     * @returns {CloudEvent} a new CloudEvent instance for the provided headers and payload
     * @throws {ValidationError} if the payload and header combination do not conform to the spec
     */
    parse(payload, headers) {
        const parser = new parsers_1.JSONParser();
        const incoming = parser.parse(payload);
        const event = {
            type: undefined,
            source: undefined
        };
        receiver.parserMap.forEach((value, key) => {
            if (incoming[key]) {
                event[value.name] = value.parser(incoming[key]);
                delete incoming[key];
            }
        });
        const cloudevent = new __1.CloudEvent(event);
        // Every unprocessed attribute should be an extension
        Array.from(Object.keys(incoming)).forEach((extension) => cloudevent.addExtension(extension, incoming[extension]));
        cloudevent.spec.check();
        return cloudevent;
    }
}
exports.StructuredHTTPReceiver = StructuredHTTPReceiver;
