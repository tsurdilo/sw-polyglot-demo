"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.headers = exports.BINARY_HEADERS = void 0;
const TYPE = "ce-type";
const SPEC_VERSION = "ce-specversion";
const SOURCE = "ce-source";
const ID = "ce-id";
const TIME = "ce-time";
const DATA_SCHEMA = "ce-dataschema";
const SUBJECT = "ce-subject";
const HEADER_CONTENT_TYPE = "content-type";
exports.BINARY_HEADERS = Object.freeze({
    TYPE, SPEC_VERSION, SOURCE, ID, TIME, DATA_SCHEMA, SUBJECT
});
function parser(header, parser = (v) => v) {
    return { headerName: header, parse: parser };
}
const passThroughParser = parser;
/**
 * A utility Map used to retrieve the header names for a CloudEvent
 * using the CloudEvent getter function.
 */
const headerMap = new Map();
headerMap.set("dataContentType", passThroughParser(HEADER_CONTENT_TYPE));
headerMap.set("subject", passThroughParser(SUBJECT));
headerMap.set("type", passThroughParser(TYPE));
headerMap.set("specversion", passThroughParser(SPEC_VERSION));
headerMap.set("source", passThroughParser(SOURCE));
headerMap.set("id", passThroughParser(ID));
headerMap.set("time", passThroughParser(TIME));
headerMap.set("dataSchema", passThroughParser(DATA_SCHEMA));
/**
* Returns the HTTP headers that will be sent for this event when the HTTP transmission
* mode is "binary". Events sent over HTTP in structured mode only have a single CE header
* and that is "ce-id", corresponding to the event ID.
* @param {CloudEvent} event a CloudEvent
* @returns {Object} the headers that will be sent for the event
*/
function headers(event) {
    const headers = {}; // @ts-ignore No index signature with a parameter of type 'string' was found on type 'CloudEvent'.
    headerMap.forEach((parser, getterName) => {
        // @ts-ignore No index signature with a parameter of type 'string' was found on type 'CloudEvent'.
        const value = event[getterName];
        if (value) {
            headers[parser.headerName] = parser.parse(value);
        }
        if (event.extensions) {
            Object.keys(event.extensions)
                .filter((ext) => Object.hasOwnProperty.call(event.extensions, ext))
                .forEach((ext) => {
                headers[`ce-${ext}`] = event.extensions[ext];
            });
        }
    });
    return headers;
}
exports.headers = headers;
