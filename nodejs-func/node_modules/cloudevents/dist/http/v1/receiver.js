"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.binaryParsers = exports.structuredParsers = void 0;
const headers_1 = require("./headers");
;
function parser(name, parser = (v) => v) {
    return { name: name, parser: parser };
}
const binaryParsers = {
    [headers_1.BINARY_HEADERS.TYPE]: parser("type"),
    [headers_1.BINARY_HEADERS.SPEC_VERSION]: parser("specversion"),
    [headers_1.BINARY_HEADERS.SOURCE]: parser("source"),
    [headers_1.BINARY_HEADERS.ID]: parser("id"),
    [headers_1.BINARY_HEADERS.TIME]: parser("time", (v) => new Date(Date.parse(v))),
    [headers_1.BINARY_HEADERS.DATA_SCHEMA]: parser("dataSchema"),
    [headers_1.BINARY_HEADERS.SUBJECT]: parser("subject"),
    ["content-type"]: parser("dataContentType")
};
exports.binaryParsers = binaryParsers;
const structuredParsers = new Map();
exports.structuredParsers = structuredParsers;
structuredParsers.set("type", parser("type"));
structuredParsers.set("specversion", parser("specversion"));
structuredParsers.set("source", parser("source"));
structuredParsers.set("id", parser("id"));
structuredParsers.set("time", parser("time", (v) => new Date(Date.parse(v))));
structuredParsers.set("dataschema", parser("dataSchema"));
structuredParsers.set("datacontenttype", parser("dataContentType"));
structuredParsers.set("subject", parser("subject"));
structuredParsers.set("data", parser("data"));
