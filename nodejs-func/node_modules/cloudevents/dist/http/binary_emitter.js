"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitBinary = void 0;
const axios_1 = __importDefault(require("axios"));
const event_1 = require("../../event");
const v1_1 = require("./v1");
const v03_1 = require("./v03");
const validation_1 = require("../../event/validation");
function emitBinary(event, options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (event.specversion === event_1.Version.V1) {
            return emit(event, options, v1_1.headers(event));
        }
        else if (event.specversion === event_1.Version.V03) {
            return emit(event, options, v03_1.headers(event));
        }
        else
            return Promise.reject(`Unknown spec version ${event.specversion}`);
    });
}
exports.emitBinary = emitBinary;
function emit(event, options, headers) {
    return __awaiter(this, void 0, void 0, function* () {
        const contentType = { "content-type": "application/json; charset=utf-8" };
        const config = Object.assign(Object.assign({}, options), { method: "POST", headers: Object.assign(Object.assign({}, contentType), headers), data: validation_1.asData(event.data, event.dataContentType) });
        return axios_1.default.request(config);
    });
}
