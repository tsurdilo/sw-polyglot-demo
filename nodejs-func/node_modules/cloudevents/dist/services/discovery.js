"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscoveryService = void 0;
/**
 * DiscoveryService to implement the discovery spec:
 *
 * It provides a way to register Service through programmation and annotation
 *
 * It also include a express method to expose it through your API
 */
let DiscoveryService = /** @class */ (() => {
    class DiscoveryService {
        /**
         * Register your service to the DiscoveryService
         *
         * Annotation to declare a Service
         *
         * TODO Implement after discussion with team
         * It would add a @Service in front of class to declare a new service
         * @returns {void}
         */
        static Service() {
            // TO IMPLEMENT
        }
        /**
         * Register your service to the DiscoveryService
         *
         * @param {CloudEventV1Service} service to register
         * @returns {void}
         */
        static registerService(service) {
            if (DiscoveryService.servicesMap[service.name]) {
                throw new Error(`Service ${service.name} is already registered`);
            }
            DiscoveryService.servicesMap[service.name] = service;
            service.types.forEach((evt) => {
                DiscoveryService.eventsMap[evt.type] = DiscoveryService.eventsMap[evt.type] || [];
                DiscoveryService.eventsMap[evt.type].push(service);
            });
        }
        /**
         * Retrieve all services
         * @returns {CloudEventV1Service[]} all discovery services
         */
        static getServices() {
            return this.searchService();
        }
        /**
         * Search for a service
         * @param {string} term to search for, case insensitive
         * @returns {CloudEventV1Service[]} all discovery services matching `term`
         */
        static searchService(term = "") {
            //
            const searchTerm = term.toLowerCase();
            return Object.keys(DiscoveryService.servicesMap)
                .filter((k) => term === "" || k.toLowerCase().includes(searchTerm))
                .map((k) => DiscoveryService.servicesMap[k]);
        }
        /**
         * Retrieve all event types
         * @returns {CloudEventV1Service[]} all discovery services
         */
        static getTypes() {
            return this.searchType();
        }
        /**
         * Search for a type of event
         * @param {string} term to search for, case insensitive
         * @returns {CloudEventV1Service[]} all discovery services matching `type`
         */
        static searchType(term = "") {
            const searchTerm = term.toLowerCase();
            const result = {};
            Object.keys(DiscoveryService.eventsMap)
                .filter((k) => term === "" || k.toLowerCase().includes(searchTerm))
                .forEach((k) => (result[k] = DiscoveryService.eventsMap[k]));
            return result;
        }
        /**
         * Express handler
         *
         * You can add it to your express application
         *
         * @param {Function} app Your express app
         * @param {string} prefix Prefix for all discovery url
         * @param {Function} permissions Callback to implement CloudEvent permissions
         * @returns {void}
         */
        static express(app, prefix = "", permissions = () => true) {
            /**
             * Based on the spec
             * Note: for each query if the client is not authorized to see any particular
             * entity then that entity MUST be excluded from the response.
             *
             * Therefore we filter events from service as they are an entity
             *
             * TODO Need to confirm this with the group
             * @param {CloudEventV1Service} object a service object
             * @param {Record<string, unknown>} req a request object
             * @returns {CloudEventV1Service} services
             */
            const filterTypes = (object, req) => (Object.assign(Object.assign({}, object), { types: object.types.filter((type) => permissions(type.type, "Type", req)) }));
            // Implement services listing
            app.get(`${prefix}/services`, (req, res) => {
                const term = req.query.matching || "";
                res.status(200).json(DiscoveryService.searchService(term)
                    .filter((service) => permissions(service.name, "Service", req))
                    .map((service) => filterTypes(service, req)));
                res.end();
            });
            app.get(new RegExp(`${prefix}/services/.+`), (req, res) => {
                const name = req.url.substr(prefix.length + "/services/".length);
                if (
                // Non existing service
                !DiscoveryService.servicesMap[name] ||
                    // User does not have permission
                    !permissions(name, "Service", req)) {
                    res.status(404).end();
                    return;
                }
                res.status(200).json(filterTypes(DiscoveryService.servicesMap[name], req));
            });
            app.get(`${prefix}/types`, (req, res) => {
                const term = req.query.matching || "";
                const types = DiscoveryService.searchType(term);
                const result = {};
                for (const i in types) {
                    if (permissions(i, "Type", req)) {
                        result[i] = types[i]
                            .filter((service) => permissions(service.name, "Service", req))
                            .map((service) => filterTypes(service, req));
                    }
                }
                res.status(200).json(result);
                res.end();
            });
            app.get(new RegExp(`${prefix}/types/.+`), (req, res) => {
                const name = req.url.substr(prefix.length + "/types/".length);
                if (
                // Non existing type
                !DiscoveryService.eventsMap[name] ||
                    // User does not have permission
                    !permissions(name, "Type", req)) {
                    res.status(404).end();
                    return;
                }
                // Filter service and events from service
                const result = DiscoveryService.eventsMap[name]
                    .filter((service) => permissions(service.name, "Service", req))
                    .map((service) => filterTypes(service, req));
                // If no service with this event is available to the user return 404
                if (result.length === 0) {
                    res.status(404).end();
                    return;
                }
                res.status(200).json({ [name]: result });
            });
        }
    }
    /**
     * Services mapped by name
     */
    DiscoveryService.servicesMap = {};
    /**
     * Events mapped by type
     */
    DiscoveryService.eventsMap = {};
    return DiscoveryService;
})();
exports.DiscoveryService = DiscoveryService;
